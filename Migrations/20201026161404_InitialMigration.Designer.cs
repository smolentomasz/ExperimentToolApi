// <auto-generated />
using ExperimentToolApi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExperimentToolApi.Migrations
{
    [DbContext(typeof(ExperimentToolDbContext))]
    [Migration("20201026161404_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ExperimentToolApi.Models.CompressionResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("int");

                    b.Property<int>("CompressionTestId")
                        .HasColumnType("int");

                    b.Property<decimal>("PlasticRelativeReduction")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("RelativeReduction")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("StandardForce")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("XCorrectRelativeReduction")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CompressionTestId");

                    b.ToTable("CompressionResults");
                });

            modelBuilder.Entity("ExperimentToolApi.Models.CompressionTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("InitialForce")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("MachineInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<decimal>("TestSpeed")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TestStandard")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("YoungModuleSpeed")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("CompressionTests");
                });

            modelBuilder.Entity("ExperimentToolApi.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdditionalInformations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChemicalComposition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MaterialPhoto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("ExperimentToolApi.Models.TensileResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("Elongation")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PlasticElongation")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("StandardForce")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TensileTestId")
                        .HasColumnType("int");

                    b.Property<decimal>("TrueStress")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("XCorrectElongation")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("TensileTestId");

                    b.ToTable("TensileResults");
                });

            modelBuilder.Entity("ExperimentToolApi.Models.TensileTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("CompressionModuleSpeed")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("InitialForce")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("MachineInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("TestAuthor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TestSpeed")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("YeldPointSpeed")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("TensileTests");
                });

            modelBuilder.Entity("ExperimentToolApi.Models.TextureAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("EbsdDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EbsdPhoto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId")
                        .IsUnique();

                    b.ToTable("TextureAnalyses");
                });

            modelBuilder.Entity("ExperimentToolApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ExperimentToolApi.Models.CompressionResult", b =>
                {
                    b.HasOne("ExperimentToolApi.Models.CompressionTest", "CompressionTest")
                        .WithMany("CompressionResults")
                        .HasForeignKey("CompressionTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExperimentToolApi.Models.CompressionTest", b =>
                {
                    b.HasOne("ExperimentToolApi.Models.Material", "Material")
                        .WithMany("CompressionTest")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExperimentToolApi.Models.TensileResult", b =>
                {
                    b.HasOne("ExperimentToolApi.Models.TensileTest", "TensileTest")
                        .WithMany("TensileResults")
                        .HasForeignKey("TensileTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExperimentToolApi.Models.TensileTest", b =>
                {
                    b.HasOne("ExperimentToolApi.Models.Material", "Material")
                        .WithMany("TensileTest")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExperimentToolApi.Models.TextureAnalysis", b =>
                {
                    b.HasOne("ExperimentToolApi.Models.Material", "Material")
                        .WithOne("TextureAnalysis")
                        .HasForeignKey("ExperimentToolApi.Models.TextureAnalysis", "MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
